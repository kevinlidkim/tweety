curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash

====================================================



webpack.config.js

module.exports = {
  entry: './src/index.js',
  output: {
    path: './public',
    filename: 'bundle.js'
  },
  module: {
    loaders: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        loader: 'babel-loader',
        query: {
          presets: ['es2015', 'react']
        }
      },
      {test: /(\.css)$/, loaders: ['style', 'css']},
      {test: /\.eot(\?v=\d+\.\d+\.\d+)?$/, loader: 'file'},
      {test: /\.(woff|woff2)$/, loader: 'url?prefix=font/&limit=5000'},
      {test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/, loader: 'url?limit=10000&mimetype=application/octet-stream'},
      {test: /\.svg(\?v=\d+\.\d+\.\d+)?$/, loader: 'url?limit=10000&mimetype=image/svg+xml'}
    ]
  }
};

================================================================

sudo nano /etc/nginx/sites-available/default

============================================


CURRENT = EVERYTHING HERE + content:text index

THIS WORKS

sh.enableSharding("tweety");
sh.shardCollection("tweety.tweets", { "_id": "hashed"} );
sh.shardCollection("tweety.users", { "_id": "hashed" } );
sh.shardCollection("tweety.sessions", { "_id": "hashed" } );
sh.shardCollection("tweety.files", { "_id": "hashed"} );

sh.shardCollection("tweety.follows", { "follower": "hashed" } );
sh.shardCollection("tweety.likes", { "tweet": "hashed" } );

db.tweets.createIndex({username: "hashed"});
db.tweets.createIndex({timestamp: -1});

db.tweets.createIndex({content: "text"});
db.users.createIndex({username: 1});


=================================================

test index

sh.enableSharding("tweety");
db.tweets.ensureIndex( { _id : "hashed" } );
sh.shardCollection("tweety.tweets", { "_id": "hashed"} );
db.users.ensureIndex( { username : "hashed" } );
sh.shardCollection("tweety.users", { "username": "hashed" } );
db.follows.ensureIndex( { follower: "hashed" } );
sh.shardCollection("tweety.follows", { "follower": "hashed" } );
db.likes.ensureIndex( { tweet: "hashed" } );
sh.shardCollection("tweety.likes", { "tweet": "hashed" } );
db.sessions.ensureIndex( { _id : "hashed" } );
sh.shardCollection("tweety.sessions", { "_id": "hashed" } );

db.tweets.createIndex({username: "hashed"});
db.tweets.createIndex({timestamp: -1});

db.files.ensureIndex( { _id : "hashed" } );
sh.shardCollection("tweety.files", { "_id": "hashed"} );

db.tweets.createIndex({content: "text"});
db.users.createIndex({username: 1});

=================================================

TWEET HASH ID

sh.enableSharding("tweety");
db.tweets.ensureIndex( { _id : "hashed" } );
sh.shardCollection("tweety.tweets", { "_id": "hashed"} );
db.users.ensureIndex( { username : "hashed" } );
sh.shardCollection("tweety.users", { "username": "hashed" } );
db.follows.ensureIndex( { follower: "hashed" } );
sh.shardCollection("tweety.follows", { "follower": "hashed" } );
db.likes.ensureIndex( { tweet: "hashed" } );
sh.shardCollection("tweety.likes", { "tweet": "hashed" } );
db.sessions.ensureIndex( { _id : "hashed" } );
sh.shardCollection("tweety.sessions", { "_id": "hashed" } );


db.users.createIndex({email: 1});
db.tweets.createIndex({username: 1});
db.tweets.createIndex({timestamp: -1});
db.tweets.createIndex({content: "text"});
db.tweets.createIndex({interest: -1});
db.tweets.createIndex({retweets: -1});
db.tweets.createIndex({likes: -1})
db.tweets.createIndex({parent: 1});
db.follows.createIndex({following: 1});
db.likes.createIndex({user: 1});

=====================================================


db.fs.chunks.createIndex( { files_id : 1 } )
sh.shardCollection("tweety.fs.chunks", { "files_id": 1} );
db.fs.files.createIndex( { files_id : 1 } )
sh.shardCollection("tweety.fs.files", { "files_id": 1} );

db.runCommand( { shardCollection : "tweety.fs.chunks" , key : { files_id : 1 , n : 1 } } )


==========================================

CREATE KEYSPACE Tweety
WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 1};

CREATE TABLE media (
  file_id text PRIMARY KEY,
  content blob,
  mimetype text
);

DROP TABLE media;

sudo rm -rf /var/log/nginx/*
sudo rm -rf /var/log/mongodb/*

sudo du -x / | sort -n | tail -40
df -h

=============================================

127.0.0.1 localhost
192.168.1.38 load-balancer
192.168.1.45 tweety-1
192.168.1.47 tweety-2
192.168.1.40 tweety-3
192.168.1.44 tweety-4
192.168.1.43 tweety-5
192.168.1.42 tweety-6
192.168.1.50 tweety-7
192.168.1.53 tweety-8
192.168.1.56 tweety-9

worker_rlimit_nofile 50000;

upstream backend  {
  server 192.168.1.45 max_fails=1  fail_timeout=2s;
  server 192.168.1.47 max_fails=1  fail_timeout=2s;
  server 192.168.1.40 max_fails=1  fail_timeout=2s;
  server 192.168.1.44 max_fails=1  fail_timeout=2s;
  server 192.168.1.43 max_fails=1  fail_timeout=2s;
  server 192.168.1.42 max_fails=1  fail_timeout=2s;
  server 192.168.1.50 max_fails=1  fail_timeout=2s;
  server 192.168.1.53 max_fails=1  fail_timeout=2s;
  server 192.168.1.56 max_fails=1  fail_timeout=2s;
}

server {
  listen  80;
  server_name kevinli4.cse356.compas.cs.stonybrook.edu;
  location / {
    proxy_pass  http://backend;
  }
}


rs.initiate(
  {
    _id: "config1",
    configsvr: true,
    members: [
      { _id : 0, host : "load-balancer:27019" }
    ]
  }
)


sudo mongod --configsvr --port 27019 --replSet config1 --dbpath /data/db/config --fork --logpath /var/log/mongodb/config
sudo mongod --shardsvr --port 27018 --dbpath /data/db/shard --fork --logpath /var/log/mongodb/shard
sudo mongos --configdb config1/load-balancer:27019 --fork --logpath /var/log/mongodb/mongo

sh.addShard("load-balancer:27018")
sh.addShard("tweety-1:27018")
sh.addShard("tweety-2:27018")
sh.addShard("tweety-3:27018")
sh.addShard("tweety-4:27018")
sh.addShard("tweety-5:27018")
sh.addShard("tweety-6:27018")
sh.addShard("tweety-7:27018")
sh.addShard("tweety-8:27018")
sh.addShard("tweety-9:27018")

use admin
db.runCommand( { removeShard: "shard0011" } )
db.runCommand( { movePrimary : "tweety", to : "shard0001" } )

mongostat --host tweety-1:27018
mongotop

======================================

var before = new Date();
db.tweets.find({
  username: "stalegrape",
  timestamp: { $lte: 1493273504 }
}).sort({timestamp: -1}).limit(25);
var after = new Date();
var time = after - before;


var before = new Date();
db.tweets.aggregate([
  { $match: 
    {
      username: "stalegrape",
      timestamp: { $lte: 1493273504 }
    } 
  },
  { $sort: { timestamp: -1 } },
  { $limit: 25 }
]);
var after = new Date()
var time = after - before;


var before = new Date();
db.tweets.find({
  username: "neighborlywine",
  timestamp: { $lte: 1493966845 }
}).sort({timestamp: -1}).limit(25);
var after = new Date();
var time = after - before;

var before = new Date();
db.tweets.find({
  timestamp: { $lte: 1493966845},
  username: "neighborlywine",
  content: /a/
}).sort({timestamp: -1}).limit(25);
var after = new Date();
var time = after - before;